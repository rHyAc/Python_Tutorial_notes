
1. Formatting	
	1. string literals
		1. begin a string with f or F
		2. inside this string, write a expression between { and } that can refer to 
			variables or literal values
				e.g. a = 1
				     str = f'{a:2}'		# str == ' 1'

	2. str.format()
		1. use { and } to mark where a variable will be substituted 
			and can provide detailed formatting directives
		2. a number in the brackets can be used to refer to the position of the object
		3. if keyword arguments are used in the str.format() method, 
			their values are referred to by using the name of the argument
				e.g. a = 1.3333
			     	     b = 2
			     	     str1 = '{:5.2}'.format(a)		# str1 == '  1.3'
			     	     str2 = '{1} and {0}'.format(a, b)	# str2 == '2 and 1.3333'
				     str3 = '{k}'.format(k = b)		# str3 == '2'
				     str4 = '{0} {k}'.format(a, k = b)	# str4 == '1.3333 2'

	3. str.rjust(), str.ljust(), str.center() Function
		str.rjust(n) -- right-justifies a string in a field of a given width n
				by padding it with spaces

	4. str.zfill() Function
		str.zfill(n) -- pads a numeric string on the left with zero with a given width n

2. str() and repr() Function
	1. str() return representations of values which are fairly human-readable
	2. repr() generate representations which can be read by the interpreter 



3. Reading and Writing Files
	1. use the with keyword to open file
		e.g.
			# the file is properly closed after its suite finishes, 
			# 	even if an exception is raised at some point
			with open('filename', 'mode') as f:	

	 2. reading lines from a file
		e.g. for line in f: 